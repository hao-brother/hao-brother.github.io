{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-03-28T12:50:44.000Z","updated":"2020-03-29T03:25:06.161Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-03-28T12:52:27.000Z","updated":"2020-03-29T03:27:15.002Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"search","date":"2020-03-28T12:55:50.000Z","updated":"2020-03-28T12:56:19.471Z","comments":true,"path":"search/index.html","permalink":"http://yoursite.com/search/index.html","excerpt":"","text":""}],"posts":[{"title":"H-bの博客","slug":"H-bの博客","date":"2020-03-29T12:37:08.353Z","updated":"2020-04-03T02:38:34.415Z","comments":true,"path":"2020/03/29/H-bの博客/","link":"","permalink":"http://yoursite.com/2020/03/29/H-b%E3%81%AE%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"天苍茫而路漫兮，岁月将行。九死生而笑看兮，且吟长歌。","categories":[],"tags":[]},{"title":"蓝桥杯-第五届(温度采集)","slug":"蓝桥杯-第五届(温度采集) ","date":"2020-03-10T04:49:16.000Z","updated":"2020-04-07T04:57:28.138Z","comments":true,"path":"2020/03/10/蓝桥杯-第五届(温度采集) /","link":"","permalink":"http://yoursite.com/2020/03/10/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AC%AC%E4%BA%94%E5%B1%8A(%E6%B8%A9%E5%BA%A6%E9%87%87%E9%9B%86)%20/","excerpt":"","text":"这是我自己在学习蓝桥杯过程中总结的一些知识，希望对今后的学习和备战蓝桥的同学能够提供一些帮助吧。蓝桥杯-第五届(温度采集)1.试题要求如下 2.题目要点分析1）根据当前温度来显示不同的温度区间2）不同的温度区间，led闪烁不同的频率3）矩阵按键输入设置上下温度3.注意事项1）输入进去的温度，要进行最大温度与最小温度的比较，若有误，需清屏2）按键扫描函数延时与中断触发时间可能会有干扰，需解决4.代码实现开始的一些初始化之类的和第三届一样，这里不再分开叨叙(一笔简明带过)，忘记的朋友可以去看第三届解析#include &quot;stc15f2k60s2.h&quot; #include &quot;ds18b20.h&quot; uchar tab[]={0xc0, // 段选 0- 9 加上 - . 熄灭 0xf9,0xa4,0xB0,0x99,0x92,0x82,0xf8,0x80,0x90, 0xbf,0x7f,0xff}; // - . uint yi=0;uint er=0;uint san=0;uint si=0; uint wu=0;uint liu=0;uint qi=0;uint ba=0; // 全局变量 控制数码管的段选显示变化 uchar max=30; // 初始化温度上限30 全局变量 uchar min=20; // 初始化温度下限20 全局变量 uchar qujian; // 寄存判断区间后显示的数值 全局变量 uchar wendu=0; // 读取当前的温度，进行与区间判断 全局变量 uchar shezhi=0; // 按键设置的标志位 初始化为0 全局变量 uchar num; // 按下不同的矩阵的按键后，num发生变化，被赋予不同的数 全局变量 uchar flag=0 // 按下矩阵按键后的标志位，标志其被按下 全局变量 void delayms(uint a) // 延时 1ms { uint b; for(;a&gt;0;a--) { for(b=845;b&gt;0;b--); } } void all_init() // 初始化 关闭蜂咛器 继电器 数码管等 { P2=0XA0; P0=0X00; P2=0X80; P0=0XFF; P2=0XC0; P0=0XFF; P2=0XFF; P0=0XFF; } void display(uchar channel,uchar number) // 数码管的位选与段选 { P2=0XC0; P0=0X01&lt;&lt;channel; P2=0XFF; P0=tab[number]; delayms(1); } void show_SMG() // 数码显示函数 { display(0,yi); display(1,er); display(2,san); display(3,si); display(4,wu); display(5,liu); display(6,qi); display(7,ba); P2=0XC0; // 为了解决最后一个数码管过亮问题 P0=0XFF; P2=0XFF; P0=0XFF; } 官方提供的ds18b20代码资料 — 需修改 — 重点/*************************************************/ // 以下为官方提供 #include &quot;stc15f2k60s2.h&quot; #include &quot;ds18b20.h&quot; sbit DQ = P1^4; void Delay_OneWire(unsigned int t) // 延时函数 { unsigned char i; while(t--){ for(i=0; i&lt;8; i++); } } void Write_DS18B20(unsigned char dat) // 向ds18b20写一个字节 { unsigned char i; for(i=0;i&lt;8;i++) { DQ = 0; DQ = dat&amp;0x01; Delay_OneWire(5); DQ = 1; dat &gt;&gt;= 1; } Delay_OneWire(5); } unsigned char Read_DS18B20(void) // 从ds18b20读取一个字节 { unsigned char i; unsigned char dat; for(i=0;i&lt;8;i++) { DQ = 0; dat &gt;&gt;= 1; DQ = 1; if(DQ) { dat |= 0x80; } Delay_OneWire(5); } return dat; } bit init_ds18b20(void) // ds18b20 设备初始化 { bit initflag = 0; DQ = 1; Delay_OneWire(12); DQ = 0; Delay_OneWire(80); DQ = 1; Delay_OneWire(10); initflag = DQ; Delay_OneWire(5); return initflag; } /*********************************/ // 以下需要自己写 unsigned char Tempget(void) { unsigned char low,high,temp; /***************************/ // 温度进行读取 init_ds18b20(); Write_DS18B20(0XCC); // ds18b20手册 Write_DS18B20(0x44); Delay_OneWire(100); /***************************/ // 温度进行转化 init_ds18b20(); Write_DS18B20(0xcc); Write_DS18B20(0xbe); low=Read_DS18B20(); high=Read_DS18B20(); temp=high&lt;&lt;4; temp|=(low&gt;&gt;4); return temp; } 按键功能操作 — 重点void keyscan16() { /**************************/ // 第一行扫描 P30=0; P31=P32=P33=1; P44=P42=P35=P34=1; if(P44==0) { delayms(5); if(P44==0) { num=0; // 显示数字为0 flag=1; // 按下的标志位 while(!P44); } } else if(P42==0) { delayms(5); if(P42==0) { num=1; flag=1; while(!P42); } } else if(P35==0) { delayms(5); if(P35==0) { num=2; flag=1; while(!P35); } } /**************************/ //第二行扫描 P31=0; P30=P32=P33=1; P44=P42=P35=P34=1; if(P44==0) { delayms(5); if(P44==0) { num=3; flag=1; while(!P44); } } else if(P42==0) { delayms(5); if(P42==0) { num=4; flag=1; while(!P42); } } else if(P35==0) { delayms(5); if(P35==0) { num=5; flag=1; while(!P35); } } /**************************/ // 第三行扫描 P32=0; P30=P31=P33=1; P44=P42=P35=P34=1; if(P44==0) { delayms(5); if(P44==0) { num=6; flag=1; while(!P44); } } else if(P42==0) { delayms(5); if(P42==0) { num=7; flag=1; while(!P42); } } else if(P35==0) { delayms(5); if(P35==0) { num=8; flag=1; while(!P35); } } /**************************/ // 第四行扫描 --- 重点 P33=0; P30=P31=P32=1; P44=P42=P35=P34=1; if(P44==0) { delayms(5); if(P44==0) { num=9; flag=1; while(!P44); } } else if(P42==0) { delayms(5); if(P42==0) { if(shezhi==0) // 设置按键的标志位 { shezhi=1; EA=0; // 按下设置后 关闭中断 实际是为了关闭led灯的闪烁 TR0=0; ET0=0; P2=0X80; // 在设置时 关闭led P0=0XFF; P2=0XA0; // 在设置时 关闭 继电器 蜂咛器 P0=0X00; yi=liu=10; // - 显示设置时候的独特数码管 er=san=si=wu=qi=ba=12; } else if(shezhi==1) // 如果再次按下设置按键 打开中断 恢复小灯的闪烁 { shezhi=0; EA=1; // 按下设置后 打开中断 实际是为了恢复led灯的闪烁 TR0=1; ET0=1; max=er*10+san; // 再次按下这个设置按键时 保存所输入的最大与最小值 min=qi*10+ba; } while(!P42); } } else if(P35==0) { delayms(5); if(P35==0) { if(shezhi==1) // 如果在设置的状态下 按下清除键 则自动的清除当前输入的数值 { er=san=qi=ba=12; } while(!P35); } } 中断函数 — 重要uint tt=0; // 累加的标志位 bit led_spot=0; // led闪烁的标志位 void Timer0Init(void) // 定时器 0 5ms { AUXR |=0x80; TMOD &amp;=0XF0; TL0=0X00; TH0=0X28; TF0=0; TR0=1; ET0=1; EA=1; } void timer0 () interrupt 1 { tt++; /****************************************/ // 0区间 if(qujian==0) { if(tt==160) // 160*5=800ms=0.8s { tt=0; if(led_spot==0) // 设置标志位 实现数码管的闪烁 { led_spot=1; P2=0X80; // 关闭其他数码管 防止干扰 下同 P0=0XFF; P2=0X80; // 点亮 led P00=0; } else if(led_spot==1) { led_spot=0; P2=0X80; // 关闭 led P0=0xff; } } } /***************************************/ // 1区间 if(qujian==1) { if(tt==80) // 80*5=400ms=0.4s { tt=0; if(led_spot==0) { led_spot=1; P2=0X80; P0=0XFF; P2=0X80; P00=0; } else if(led_spot==1) { led_spot=0; P2=0X80; P0=0xff; } } } /***************************************/ //2 if(qujian==2) { if(tt==40) // 40*5=200ms=0.2s { tt=0; if(led_spot==0) { led_spot=1; P2=0X80; P0=0XFF; P2=0X80; P00=0; } else if(led_spot==1) { led_spot=0; P2=0X80; P0=0xff; } } } } 主函数中对标志位进行判断void main() { allinit(); Timer0Init(); yi=san=10;er=1; si=wu=liu=12; while(1) { keyscan16(); // 按键扫描 if(shezhi==0) // 在自动读取温度的页面 { wendu=Tempget(); if(wendu&lt;min) // 区间0 { qujian=0; // 对区间赋值 在中断中进行判断 实现不同频率的小灯闪烁 下同 P2=0XA0; // 关闭继电器 P0=0X00; } else if((wendu&gt;=min)&amp;&amp;(wendu&lt;=max)) // 区间1 注意格式 否则程序易卡死在循环中 { qujian=1; P2=0XA0; P0=0X00; } else if(wendu&gt;max) // 区间2 { qujian=2; P2=0XA0; // 超出最大值 继电器打开 P0=0X10; } yi=10; er=qujian; san=10; si=wu=liu=12; qi=wendu/10; ba=wendu%10; show_SMG(); // 数码管显示 } else if(shezhi==1 // 在设置页面 { if((er==12)&amp;&amp;(flag==1)) // - 判断按键的标志位 并且依次显示按下去的数值 { er=num; flag=0; } else if((san==12)&amp;&amp;(flag==1)) { san=num; flag=0; } else if((qi==12)&amp;&amp;(flag==1)) { qi=num; flag=0; } else if((ba==12)&amp;&amp;(flag==1)) { ba=num; flag=0; if((qi*10+ba)&gt;(er*10+san)) // 如果输入最小值大于最大值，清屏重新输入，并且打开提示，开继电器 { yi=liu=10; er=san=si=wu=qi=ba=12; // 清屏操作 P2=0X80; P01=0; } } show_SMG(); // 显示数码管 } show_SMG(); //再次显示数码管 防漏 } } 版权所有，未经允许，不得转载 !","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"http://yoursite.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[]},{"title":"蓝桥杯-第四届(自动灌溉系统)","slug":"蓝桥杯-第四届(自动灌溉)","date":"2020-03-09T04:49:16.000Z","updated":"2020-04-02T15:35:11.832Z","comments":true,"path":"2020/03/09/蓝桥杯-第四届(自动灌溉)/","link":"","permalink":"http://yoursite.com/2020/03/09/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%B1%8A(%E8%87%AA%E5%8A%A8%E7%81%8C%E6%BA%89)/","excerpt":"","text":"这是我自己在学习蓝桥杯过程中总结的一些知识，希望对今后的学习和备战蓝桥的同学能够提供一些帮助吧。蓝桥杯-第四届(自动灌溉系统)1.试题要求如下 2.题目要点分析 3.注意事项1）使用电位器RB2输出电压模拟湿度输出值2）系统RTC(1302)通过EEPROM保存阈值3）本届的代码不是很难，但它的思维逻辑要求比较大，重要的是区分清楚手动和自动两种工作的模式4.代码实现开始的一些初始化之类的和第三届一样，这里不再分开叨叙(一笔简明带过)，忘记的朋友可以去看第三届解析uchar tab[]={0xc0, // 段选 0- 9 加上 - . 熄灭 0xf9,0xa4,0xB0,0x99,0x92,0x82,0xf8,0x80,0x90, 0xbf,0x7f,0xff}; // - . uint yi,er,san,si,wu,liu,qi,ba; // 全局变量 控制数码管的段选显示变化 void delayms(uint a) // 延时 { uint b; for(;a&gt;0;a--) { for(b=845;b&gt;0;b--); } } void all_init() // 初始化 关闭蜂咛器 继电器 数码管等 { P2=0XA0; P0=0X00; P2=0X80; P0=0XFF; P2=0XC0; P0=0XFF; P2=0XFF; P0=0XFF; } void display(uint channel,uint num) // 数码管的位选与段选 { P2=0XC0; P0=0X01&lt;&lt;channel; P2=0XE0; P0=tab[num]; delayms(2); } void show_SMG() // 数码管显示函数 { display(0,yi); display(1,er); display(2,san); display(3,si); display(4,wu); display(5,liu); display(6,qi); display(7,ba); } 官方提供的RTC(1302)代码资料 — 需修改 — 重点/**************************************************/ //以下为官方提供 #include &lt;STC15F2K60S2.H&gt; #include &lt;intrins.h&gt; #include &quot;ds1302.h&quot; sbit SCK=P1^7; sbit SDA=P2^3; sbit RST = P1^3; // DS1302复位 void Write_Ds1302_Byte(unsigned char temp) { unsigned char i; for (i=0;i&lt;8;i++) { SCK=0; SDA=temp&amp;0x01; temp&gt;&gt;=1; SCK=1; } } void Write_Ds1302( unsigned char address,unsigned char dat ) { RST=0; _nop_(); SCK=0; _nop_(); RST=1; _nop_(); Write_Ds1302_Byte(address); //Write_Ds1302_Byte(dat); 这为原来官方提供的51例程，但应用在15程序中应该如下修改 Write_Ds1302_Byte((dat/10&lt;&lt;4)|(dat%10)); // 这为修改后的 RST=0; } unsigned char Read_Ds1302 ( unsigned char address ) { unsigned char i,temp=0x00; uchar dat1,dat2; // 本来没有这两个参数，但为了修改成15，添加的 RST=0; _nop_(); SCK=0; _nop_(); RST=1; _nop_(); Write_Ds1302_Byte(address); for (i=0;i&lt;8;i++) { SCK=0; temp&gt;&gt;=1; if(SDA) temp|=0x80; SCK=1; } RST=0; _nop_(); RST=0; SCK=0; _nop_(); SCK=1; _nop_(); SDA=0; _nop_(); SDA=1; _nop_(); /************************************/ //这段代码原来没有，需要自己添加(源代码无删减) dat1=temp/16; // 进制的转化 在1302中 使用的是压缩BCD码 dat2=temp%16; temp=dat1*10+dat2; /************************************/ return (temp); } /****************************************************/ //以下需要自己编写 uchar shijian[]={0,30,8,0,0,0,0}; // 1302 秒 分 时 日 月 周 年 void DS_Write(void) // 在1302中写入数据 { uchar i,add; add=0x80; // 0x80写 0x81读 Write_Ds1302(0x8e,0x00); // 开始(0x00) for(i=0;i&lt;7;i++) { Write_Ds1302(add,shijian[i]); add+=2; // 1302 寄存器定义 读与写 每次加二(可能因为压缩PCB码缘故) } Write_Ds1302(0x8e,0x80); // 关闭(0x80) } void DS_Read(void) // 读取1302的数据 { uchar i,add; add=0x81; // 0x81读 Write_Ds1302(0x8e,0x00); // 开始(0x00) for(i=0;i&lt;7;i++) { shijian[i]=Read_Ds1302(add); add+=2; } Write_Ds1302(0x8e,0x80); // 关闭(0x80) } 官方提供的IIC代码资料 — 需修改成EEPROM — 需修改成AD — 重点/***************************************************/ //以下代码官方提供 #include &quot;STC15F2K60S2.H&quot; #include &quot;intrins.h&quot; #include &quot;iic.h&quot; #define somenop {_nop_();_nop_();_nop_();_nop_();_nop_();} //这里需要扩大8倍延时 #define SlaveAddrW 0xA0 #define SlaveAddrR 0xA1 sbit SDA = P2^1; /* 数据线 */ sbit SCL = P2^0; /* 时钟线 */ void IIC_Start(void) // 总线启动 { SDA = 1; SCL = 1; somenop; SDA = 0; somenop; SCL = 0; } void IIC_Stop(void) // 总线停止 { SDA = 0; SCL = 1; somenop; SDA = 1; } bit IIC_WaitAck(void) // 等待应答 { SDA = 1; somenop; SCL = 1; somenop; if(SDA) { SCL = 0; IIC_Stop(); return 0; } else { SCL = 0; return 1; } } void IIC_SendByte(unsigned char byt) // 发送数据 { unsigned char i; for(i=0;i&lt;8;i++) { if(byt&amp;0x80) { SDA = 1; } else { SDA = 0; } somenop; SCL = 1; byt &lt;&lt;= 1; somenop; SCL = 0; } } unsigned char IIC_RecByte(void) // 接收数据 { unsigned char da; unsigned char i; for(i=0;i&lt;8;i++) { SCL = 1; somenop; da &lt;&lt;= 1; if(SDA) da |= 0x01; SCL = 0; somenop; } return da; } /*********************************************************/ //以下代码需要自己写 uchar AD_read(uchar add) // 与读取IIC代码一样 { uchar temp; IIC_Start(); IIC_SendByte(0x90); IIC_WaitAck(); IIC_SendByte(add); IIC_WaitAck(); IIC_Stop(); IIC_Start(); IIC_SendByte(0x91); IIC_WaitAck(); temp=IIC_RecByte(); IIC_Stop(); return temp; } /***********************/ //EEPROM uchar EEPROM_read(uchar add) { uchar temp; IIC_Start(); IIC_SendByte(0xa0); IIC_WaitAck(); IIC_SendByte(add); IIC_WaitAck(); IIC_Stop(); IIC_Start(); IIC_SendByte(0xa1); IIC_WaitAck(); temp=IIC_RecByte(); IIC_Stop(); return temp; } void EEPROM_write(uchar add,uchar dat) // 写数据 哪个地址 写入什么数据 { IIC_Start(); IIC_SendByte(0xa0); IIC_WaitAck(); IIC_SendByte(add); IIC_WaitAck(); IIC_SendByte(dat); // 写入数据 IIC_WaitAck(); IIC_Stop(); } 按键功能操作 uchar s7_spot=0; // s7标志位 uchar s6_spot=0; // s6标志位 uchar jia_spot=0; // 加的标志位 uchar jian_spot=0; // 减的标志位 uchar fazhi; // 阈值(存入EEPROM) uchar kai=1; // 蜂咛器 uchar jidianqi=0; // 继电器 模拟灌溉设备的打开与关闭 void keyscan() { /***************************///s7 if(P30==0) { delayms(2); if(P30==0) { if(s7_spot==0) // s7_spot = 0 自动状态 { s7_spot=1; P0=0XFF; P2=0X80; // led2 亮 P01=0; } else if(s7_spot==1) // s7_spot = 1 手动状态 { s7_spot=0; P0=0XFF; P2=0X80; // led1 亮 P00=0; } }while(!P30); } /******************************///s6 if(P31==0) { delayms(2); if(P31==0) { if(s7_spot==0) // 说明是在自动状态下 { if(s6_spot==0) { s6_spot=1; } else if(s6_spot==1) { s6_spot=0; } } else if(s7_spot==1) // 说明在手动状态下 { kai = ~kai; // 蜂咛器开和关的标志位 } }while(!P31); } /*******************************///s5 +1 if(P32==0) { delayms(2); if(P32==0) { if(s7_spot==0) // 在自动状态下 { jia_spot=1; // 加 标志位 } else if(s7_spot==1) // 在手动状态下 { jidianqi=1; // 灌溉设备打开 } }while(!P32); } /*****************************///s4 -1 if(P33==0) { delayms(2); if(P33==0) { if(s7_spot==0) // 在自动状态下 { jian_spot=1; // 减 标志位 } else if(s7_spot==1) // 在手动状态下 { jidianqi=0; // 灌溉设备关闭 } }while(!P33); } } 主函数中对标志位进行判断extern uchar shijian[]; // 对1302的储存数组进行声明 void main() { uchar shidu=0; yi=0;er=8;san=10;si=3;wu=0;liu=12;qi=5;ba=0; all_init(); P2=0X80; // L1亮 自动工作模式 P00=0; DS_Write(); // ds1302写 while(1) { DS_Read(); // ds1302读 shidu=AD_read(0x03); // 从AD里面读取电压模拟湿度 shidu=shidu*0.39; // 225转换为0~5伏 if(s7_spot==0) // s7没有被按下 为自动状态 L1 { // EEPROM_write(0x10,50); // 已经初始值为50，不在打开，将其地址赋予0x10，下次上电直接从EEPROM读取，不再赋予初值和地址 // delayms(5); // 延时等待应答 fazhi=EEPROM_read(0x10); // 读取阈值 /*当前读取的湿度与阈值进行比较 小于则自动打开灌溉设备(通过继电器模拟)*/ if(shidu&lt;fazhi) { P2=0XA0; P0=0X10; } else { P2=0XA0; P0=0X00; } if(s6_spot==1) // s6按下 需要对阈值进行调整 { if(jia_spot==1) // 在s6按下后，s5被按下，加标志位为1 阈值加1 { jia_spot=0; fazhi=fazhi+1; } if(jian_spot==1) // 在s6按下后，s4被按下，减标志位为1 阈值减1 { jian_spot=0; fazhi=fazhi-1; } EEPROM_write(0x10,fazhi); // 将改变的值写入EEPROM中 yi=er=10; // 在进行阈值调整时，显示独特的显示页面 san=si=wu=liu=12; qi=fazhi/10; ba=fazhi%10; } else if(s6_spot==0) // s6没有按下 显示1302里面存储的数 { yi=shijian[2]/10; er=shijian[2]%10; san=10; si=shijian[1]/10; wu=shijian[1]%10; liu=12; qi=shidu/10; // 显示湿度 ba=shidu%10; } } /**************************************************************/ //以下两种按键实际就是 在手动工作模式下 当湿度小于阈值时，蜂咛器报警，s6可以将蜂咛 //器关闭，再次按下s6,可以开启对蜂咛器的控制。而在手动工作模式下，蜂咛器的工作(叫或 //者不叫)不会被s5、s4按键的按下所干扰，s5、s4按下只控制灌溉系统(继电器)的工作 。 else if(s7_spot==1) // s7被按下 为手动状态 L2 { if((shidu&lt;fazhi)&amp;&amp;(kai==0)) // 在手动状态下，s6被按下，蜂咛器标志位kai取反为0 { if(jidianqi==1) // 手动状态下 s5按下 只有继电器亮(暗示蜂咛器被关闭) { P2=0XA0; P0=0X10; } else if(jidianqi==0) // 手动状态下 s4按下 继电器灭 { P2=0XA0; P0=0X00; } } else if((shidu&lt;fazhi)&amp;&amp;(kai==1)) // 在手动状态下，s6没有被按下(s6被按下后 // 又被按下)，蜂咛器标志位为1 { if(jidianqi==1) // 在手动情况下，蜂咛器报警，开启灌溉 { // s5按下 继电器亮 蜂咛器叫 P2=0XA0; P0=0X50; } else if(jidianqi==0) { // s4按下 继电器灭 蜂咛器叫 P2=0XA0; P0=0X40; } } /**************************************************************/ else if(shidu&gt;fazhi) { if(jidianqi==1) // 手动状态下 s5按下 继电器亮 { P2=0XA0; P0=0X10; } else if(jidianqi==0) // 手动状态下 s4按下 继电器灭 { P2=0XA0; P0=0X00; } } yi=shijian[2]/10; er=shijian[2]%10; san=10; si=shijian[1]/10; wu=shijian[1]%10; liu=12; qi=shidu/10; ba=shidu%10; } // else if(s7_spot==1) 的括号 keyscan(); // 按键扫描函数 show_SMG(); // 对全局变量 yi~ba 返回的值进行数码管显示 } // while的括号 } // main的括号 版权所有，未经允许，不得转载 !","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"http://yoursite.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[]},{"title":"蓝桥杯-第三届(自动售水机)","slug":"蓝桥杯-第三届(自动售水机)","date":"2020-03-08T04:49:16.000Z","updated":"2020-04-01T04:23:32.682Z","comments":true,"path":"2020/03/08/蓝桥杯-第三届(自动售水机)/","link":"","permalink":"http://yoursite.com/2020/03/08/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AC%AC%E4%B8%89%E5%B1%8A(%E8%87%AA%E5%8A%A8%E5%94%AE%E6%B0%B4%E6%9C%BA)/","excerpt":"","text":"这是我自己在学习蓝桥杯过程中总结的一些知识，希望对今后的学习和备战蓝桥的同学能够提供一些帮助吧。蓝桥杯-第三届(自动售水机)1.试题要求如下 2.题目要点分析1) 上电后各部分要初始化(关闭蜂咛器、数码管、led灯、继电器)，并且数码管要显示题目要求初始的数(含格式)2）按下 S7 清屏开始计数(计数器中断)流水显示，S6停止流水计数并且计算显示出流水价格3) 通过光敏电阻读取环境的亮度，当其发生改变时，做出不同的响应4）掌握IIC3.注意事项1）数码管小数的显示，需要重新计算数码管段选数组 tab_spot[] ，都加上h，使其显示出小数点2）S7按键不会改变流水的状态，唯有S6可以改变, S7作用只有一个，就是清屏开始流水计数3）通过流水量计算出价格这方法要注意4）光敏电阻读取数据与显示的转换要注意（ IIC 写0x90, 读0x91)5) 引用头文件并且定义无符号类型#include &quot;STC15f2k60S2.h&quot; #include &quot;intrins.h&quot; // 引用头文件 调用iic里面的延时函数 _nop_() #define uchar unsigned char #define uint unsigned int 4.代码实现首先是进行初始化void allinit() // 初始化 { P2=0XA0; P0=0X00; P2=0X80; P0=0XFF; P2=0XC0; P0=0XFF; P2=0XFF; P0=0XFF; } 延时函数void delayms(uchar a) { uint b; for(;a&gt;0;a--) { for(b=845;b&gt;0;b--) { } } } 数码管显示(双重—-正常不加小数点和加小数点)uchar tab[]={0xc0, 0xf9,0xa4,0xB0,0x99,0x92,0x82,0xf8,0x80,0x90, 0xff}; // 不加小数点 uchar tab_spot[]={0x40, 0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10, 0xff}; // 加上小数点的 void display(uchar channel,uchar num) // 不加小数点段选的数码管显示 { P2=0XC0; P0=0X01&lt;&lt;channel; P2=0XE0; P0=tab[num]; delayms(2); } void display_spot(uchar channel,uchar num) // 加小数点段选的数码管显示 { P2=0XC0; P0=0X01&lt;&lt;channel; P2=0XE0; P0=tab_spot[num]; delayms(2); } 题目要求的数码管显示格式uchar yi,er,san,si,wu,liu,qi,ba; // 全局变量 void display_SMG() { display(0,yi); display_spot(1,er); display(2,san); display(3,si); display(4,wu); display_spot(5,liu); display(6,qi); display(7,ba); } 中断void Timer0Init(void) // 5毫秒 来源stc定时器计算器 波特率11.0592 定时器0 16位自动重载 { AUXR |= 0x80; TMOD &amp;= 0xF0; TL0 = 0x00; TH0 = 0x28; TF0 = 0; TR0 = 1; } uint aa=0; // 三个全局变量 进行时间、金钱计算 uint bb=0; uint money=0; void time0 () interrupt 1 // 定时器中断服务函数 1 { aa++; if(aa==20) // 100毫秒 { bb++; // 100毫秒=10毫升 (相当于数码管最后一位) aa=0; ba=bb%10; qi=bb%100/10; liu=bb%1000/100; wu=bb/1000; } if(bb==9999) { bb=0; money=bb*0.5; // 进行金钱转化 ba=money%10; qi=money%100/10; liu=money%1000/100; wu=money/1000; } } 按键操作void start() // S7按下 开启 { wu=liu=qi=ba=0; // 使得开始按按键时 数码管后四位清零 P2=0XA0; // 开启继电器 P0=0X10; ET0=1; // 开启定时器 EA=1; } void off() // S6按下 关闭 { P2=0XA0; // 关闭继电器 P0=0X00; EA=0; // 关闭定时器 ET0=0; money=bb*0.5; // 关闭时自动显示价钱 ba=money%10; qi=money%100/10; liu=money%1000/100; wu=money/1000; bb=0; // 确保下次开始计数时 从0开始 } void keyscan() { if(P30==0) { delayms(2); if(P30==0) { start(); } while(!P30); } if(P31==0) { delayms(2); if(P31==0) { off(); } while(!P31); } } 实现光敏电阻的各项功能 (要利用给的IIC文件夹，稍加修改即可)/*********************************************/ // 以下函数在官方数据手册提供 /*********************************************/ // _nop_() 需要引入头文件 &quot;intrins.h&quot; #define somenop {_nop_();_nop_();_nop_();_nop_();_nop_();} // 这为官方给的51 #define somenop {_nop_();_nop_();_nop_();_nop_();_nop_(); // 15的延时大概为51的8倍 _nop_();_nop_();_nop_();_nop_();_nop_(); _nop_();_nop_();_nop_();_nop_();_nop_(); _nop_();_nop_();_nop_();_nop_();_nop_(); _nop_();_nop_();_nop_();_nop_();_nop_(); _nop_();_nop_();_nop_();_nop_();_nop_(); _nop_();_nop_();_nop_();_nop_();_nop_(); _nop_();_nop_();_nop_();_nop_();_nop_(); } #define SlaveAddrW 0xA0 // 写 #define SlaveAddrR 0xA1 // 读 sbit SDA = P2^1; /* 数据线 */ sbit SCL = P2^0; /* 时钟线 */ void IIC_Start(void) // 启动条件 { SDA = 1; SCL = 1; somenop; SDA = 0; somenop; SCL = 0; } void IIC_Stop(void) // 停止条件 { SDA = 0; SCL = 1; somenop; SDA = 1; } bit IIC_WaitAck(void) // 等待应答 { SDA = 1; somenop; SCL = 1; somenop; if(SDA) { SCL = 0; IIC_Stop(); return 0; } else { SCL = 0; return 1; } } void IIC_SendByte(unsigned char byt) // 通过iic发送数据 { unsigned char i; for(i=0;i&lt;8;i++) { if(byt&amp;0x80) { SDA = 1; } else { SDA = 0; } somenop; SCL = 1; byt &lt;&lt;= 1; somenop; SCL = 0; } } unsigned char IIC_RecByte(void) // 接收iic数据 { unsigned char da; unsigned char i; for(i=0;i&lt;8;i++) { SCL = 1; somenop; da &lt;&lt;= 1; if(SDA) da |= 0x01; SCL = 0; somenop; } return da; } /***********************************/ //以下的函数需要自己根据官方提供的函数来编写 uchar iic_read(uchar add) { uchar temp; /******************/ IIC_Start(); IIC_SendByte(0x90); IIC_WaitAck(); IIC_SendByte(add); IIC_WaitAck(); IIC_Stop(); /*****************/ IIC_Start(0x91); IIC_SendByte(0x91); IIC_WaitAck(); temp=IIC_RecByte(); IIC_WaitAck(); IIC_Stop(); /****************/ return temp; } 主函数void main() { uchar guangmin; // 记录数码管的值 all_init(); // 初始化，关闭蜂咛器，继电器之类 Timer0Init(); // 中断初始化 yi=10,er=0,san=5,si=0,wu=0,liu=1,qi=0,ba=0; // 开始数码管的显示 while(1) { display_SMG(); // 初始化数码管 keyscan(); // 读取按键反馈回来的全局变量 yi ~ ba 的值，并且控制其他模块 guangmin=iic_read(0x01); // !!! iic读取光敏电阻的值并进行转换 if(guangmin&lt;64) // !!! { P0=0XFF; // 避免其小灯的干扰 P2=0X80; P00=0; // 点亮 } else { P2=0X80; P0=0XFF; } } } 5.完整的代码参考(仅供学习)链接：https://pan.baidu.com/s/138PEwdj5GlsxOEjPLrFB4Q提取码：6kt5 注: 本文为原创，未经允许，禁止转载！","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"http://yoursite.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[]},{"title":"蓝桥杯基础","slug":"蓝桥杯基础","date":"2020-03-07T04:49:16.000Z","updated":"2020-03-31T02:34:17.269Z","comments":true,"path":"2020/03/07/蓝桥杯基础/","link":"","permalink":"http://yoursite.com/2020/03/07/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%80/","excerpt":"","text":"这是我自己在学习蓝桥杯过程中总结的一些知识，希望对今后的学习和备战蓝桥的同学能够提供一些帮助吧。必须要知道的知识1. void delayms(uint ms) // 15芯片延时一毫秒软件实现 { uint a; for(;ms&gt;0;ms--) { for(a=845;a&gt;0;a--); } } 2.void allinit(void) // 初始化关闭其他模块(led、继电器、蜂咛器、数码管) { P2=0XA0; // 继电器，蜂咛器 P0=0X00; P2=0X80; // 小灯 P0=0XFF; P2=0XC0; // 段选 1~8 P0=0XFF; P2=0XFF; P0=0XFF; } 3.void keyscan(void ) // 独立按键 从上至下 S7 - S4 (P30 - P33) { if(P30==0) { delayms(5); if(P30==0) { } while(!P30); // 消抖操作 } if(P31==0) { delayms(5); if(P31==0) { } while(!P31); } if(P32==0) { delayms(5); if(P32==0) { } while(!P32); } if(P33==0) { delayms(5); if(P33==0) { } while(!P33); } } 4.void display16() // 矩阵按键(需要改变按键跳线帽) P37 = P44 P36 = P42 { /**************************/ // 第1横行读取 P30=0; P31=P32=P33=1; // 从上至下(行) S7 - S4 (P30 - P33) P44=P42=P35=P34=1; // 从左至右(列) P44(P37) P42(P36) P35 P34 if(P44==0) { delayms(5); if(P44==0) { while(!P44); // 消抖 } } else if(P42==0) { delayms(5); if(P42==0) { while(!P42); } } else if(P35==0) { delayms(5); if(P35==0) { while(!P35); } } else if(P34==0) { delayms(5); if(P34==0) { while(!P34); } } /**************************/ // 第2横行读取 P31=0; P30=P32=P33=1; P44=P42=P35=P34=1; if(P44==0) { delayms(5); if(P44==0) { while(!P44); } } else if(P42==0) { delayms(5); if(P42==0) { while(!P42); } } else if(P35==0) { delayms(5); if(P35==0) { while(!P35); } } else if(P34==0) { delayms(5); if(P34==0) { while(!P34); } } /**************************/ // 第3横行读取 P32=0; P30=P31=P33=1; P44=P42=P35=P34=1; if(P44==0) { delayms(5); if(P44==0) { while(!P44); } } else if(P42==0) { delayms(5); if(P42==0) { while(!P42); } } else if(P35==0) { delayms(5); if(P35==0) { while(!P35); } } else if(P34==0) { delayms(5); if(P34==0) { while(!P34); } } /**************************/ // 第4横行读取 P33=0; P30=P31=P32=1; P44=P42=P35=P34=1; if(P44==0) { delayms(5); if(P44==0) { while(!P44); } } else if(P42==0) { delayms(5); if(P42==0) { while(!P42); } } else if(P35==0) { delayms(5); if(P35==0) { while(!P35); } } else if(P34==0) { delayms(5); if(P34==0) { while(!P34); } } } 5.uchar tab[]={0xc0, 0xf9,0xa4,0xB0,0x99,0x92,0x82,0xf8,0x80,0x90, 0xbf,0x7f,0xff}; // - . void display(uchar channel,uchar number) // 位选 段选 { P2=0XC0; // 段选 P0=0X01&lt;&lt;channel; P2=0XFF; // 段选 P0=tab[number]; delayms(1); } display(7,1); // 使得数码管 从左数第七个 显示1 后续将继续补充与完善…","categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"http://yoursite.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"tags":[]},{"title":"c与c++知识点(四)","slug":"C与C++笔记4","date":"2020-03-06T04:49:16.000Z","updated":"2020-03-30T12:35:40.403Z","comments":true,"path":"2020/03/06/C与C++笔记4/","link":"","permalink":"http://yoursite.com/2020/03/06/C%E4%B8%8EC++%E7%AC%94%E8%AE%B04/","excerpt":"","text":"这是我自己在学习c++基础的过程中，顺便复习了下C语言，然后总结的一些小小知识点。—写在前面的话第四节1.c++面向对象特性 封装 继承 多态 万事万物都皆为对象2. c++ class aa { //访问权限 //属性（变量） //行为（函数） } 3.属性和行为 都称之为 成员 成员属性 = 属性4. public // 公共权限 成员 类内可以访问 类外可以访问 Protected // 保护权限 成员 类内可以访问 类外不可以访问（儿子可以访问父亲的保护内容） Private // 私有权限 成员 类内可以访问 类外不可以访问（儿子不可以访问父亲私有权限） 5.struct class // 区别在于 默认访问权限不同 struct // 默认为公共 public class // 默认为私有 private 未完待续…","categories":[{"name":"c与c++","slug":"c与c","permalink":"http://yoursite.com/categories/c%E4%B8%8Ec/"}],"tags":[]},{"title":"c与c++知识点(三)","slug":"C与C++笔记3","date":"2020-03-05T04:49:16.000Z","updated":"2020-03-31T02:30:06.917Z","comments":true,"path":"2020/03/05/C与C++笔记3/","link":"","permalink":"http://yoursite.com/2020/03/05/C%E4%B8%8EC++%E7%AC%94%E8%AE%B03/","excerpt":"","text":"这是我自己在学习c++基础的过程中，顺便复习了下C语言，然后总结的一些小小知识点。—写在前面的话第三节1.C++内存分为四个区 // 代码区 存放函数体的二进制代码 // 全局区 存放全局变量和静态变量以及常量 // 栈区 编译器自动分配 存放函数参数值 局部变量 // 堆区 程序员分配和释放，程序员不释放，程序结束时操作系统回收 // 意义： 不同区域存放的数据，赋予不同的生命中秋，给予更大的灵活编程 // 代码区 （程序运行前就有）存放二进制机器指令 特点 : 共享、只读 // 全局区 （程序运行前就有）存放全局变量和静态变量以及常量 该区的数据在程序结束后，由操作系统释放 // 在全局区（静态变量 static关键字 常量（字符串常量和const 修饰的全局变量）） 不在全局区的数据（局部常量） // 栈区 （程序运行后才有）不要返回局部变量的地址 // 堆区 （程序运行后才有）（程序员手动开辟和释放（delete））利用new关键字，将数据开辟到堆区返回的直接是地址 int * p = new int (10) ; // 指针本质在栈区，其数据在堆区 2. new // 返回的是该数据类型的指针 int * p=new int(10) ; // 创建了一个new型为10的变量地址 (释放 delete p;) 3. int * array = nem int[10]; // 创建了一个变量为整型个数为10的数组，他的首地址给了array (释放数组 delete[] arr;) 4.// 引用：就是给变量起别名 // 语法：数据类型 &amp;别名=原名 对别名进行操作等于对原名的数据进行操作 int a=10; int &amp; b = a; b = 20; // 那么 a也为20 5. // 引用的注意事项 // 1) 引用的时候必须要给予初始化 int &amp; b = a; (引用过程给予初始化，只有这一种写法) // 2) 引用一旦初始化后，不可更改 6. // 引用也会使得形参修饰实参 void my3(int &amp;a,int &amp;b) // 有两种解决办法 指针 和 引用 // 注意事项: // 1 )不要返回局部变量的引用 int &amp;test() { int a=10;return a; } // 2 )函数的调用可以作为左值 int &amp;ref=test(); test()=100; cout &lt;&lt; ref &lt;&lt; endl; ref = 100; 7. //引用的本质是一个指针常量 int a=10; int &amp;b = a; // 相当于 int * const b = &amp;a; 这也就是为什么引用不可修改，因为指针常量的指针指 向不可修改(b中保存着a的地址) cout &lt;&lt; a &lt;&lt; b &lt;&lt; endl; a = b = 10; // b = 20解引用 也就是*b = 20; 8. // 常量引用 // 引用的两种写法 // 1 ) int a=10； int &amp; b = a // (必须为名称，不能为10)； // 2) const int &amp; b = 10; // 第二种相当于编译器系统设置了一个变量 int temp = 10； const int &amp;b = temp； b = 20 // (这是错误的，因为加上const 之后变为只读不可修改状态) 9. // 函数默认参数 优先用户自定义的 int fun(int a,int b=10,int c=30) { return a+b+c; } main { cout &lt;&lt; fun (10 , 30 , 30 ) ; } // 70; // 当某个位置有了默认参数，那么他后边都必须是默认参数(例如 b为默认参数，那么 c 也必须是默认参数) 10.// 声明和实现 只能有一个有默认参数 int fun (int a = 10,int b = 30); int fun(int a , int b) { return a + b; } // 40 11.// 占位参数（只有函数类型，没有名字） void fun ( int a , int) { cout &lt;&lt; ” abc ” ; } // 引用时fun(10 , 10) 占位参数还可以有默认参数 void fun(int a , int = 10) { return “ abc ” ; } // 引用时 fun( 10 ) 12. // 函数重载(函数名可以相同) // 条件 : 同一个作用域下 函数名称相同 函数的参数类型不同 或者 个数不同或者顺序不同 // 注意：函数的返回值不可以作为函数重载的条件,如下 void fun ( ) void fun(int a) void fun(double b) 未完待续…","categories":[{"name":"c与c++","slug":"c与c","permalink":"http://yoursite.com/categories/c%E4%B8%8Ec/"}],"tags":[]},{"title":"c与c++知识点(二)","slug":"C与C++笔记2","date":"2020-03-04T04:49:16.000Z","updated":"2020-03-30T12:34:23.425Z","comments":true,"path":"2020/03/04/C与C++笔记2/","link":"","permalink":"http://yoursite.com/2020/03/04/C%E4%B8%8EC++%E7%AC%94%E8%AE%B02/","excerpt":"","text":"这是我自己在学习c++基础的过程中，顺便复习了下C语言，然后总结的一些小小知识点。—写在前面的话第二节1./*二维数组 总元素*/ sizeof ( arr ) ; /* 第一行元素 */ sizeof ( arr [0] ) ; /* 行数 */ sizeof ( arr ) / sizeof ( arr [0] ) /* 列数 */ sizeof ( arr [0]) / sizeof( arr [0] [0] ) ) 2./* 二维数组首地址 */ cout &lt;&lt; arr &lt;&lt; endl; /* 第一行首地址 */ cout &lt;&lt; arr [0] &lt;&lt; endl; /*第一个元素首地址 */ cout &lt;&lt; &amp; arr [0] [0] &lt;&lt; endl; // 此三者相等三者相等 /* 第二行首地址 */ cout &lt;&lt; arr[1] &lt;&lt; endl; 3./*指针就是地址*/ int *p; （p为指针变量） //使用时需要解引用 *p 即可 ( *p解引用） 4./*空指针: 用来给指针变量进行初始化，空指针不可以进行访问的*/ int *p = NULL; //不可再将地址赋值给 p 输出 5.const修饰指针 ---重点 1）const修饰指针---常量指针 2）const修饰常量---指针常量 3）const既修饰指针又修饰常量 6.—重点—//1）常量指针 const int * p = &amp;a; /*指针的指向可以修改，但是指针指向 的值不可修改 */ //2）指针常量 int * const p = &amp;a; /*指针的指向不可以修改，指针的值可以修改 */ //3）既修饰指针又修饰常量 const int * const p = &amp;a; /*指针的指向和指针的值都不可以修改 */ //（如何记忆: const—常量 ，* p —指针 如何用：紧接着 const 的是p / * 紧跟着谁 谁不能操作） 7.int arr [10], int * p; p = arr ; cout &lt;&lt; *p; //（数组的名称为其的首地址) 8.值传递，不能修改实参的值，只能修改形参的值。地址传递可以修改实参的值。9.结构体struct student/**** 自己创建的结构体类型为 student, 此类型的变量名字为s1, s2 ***/ { string name; int age; int score; }; //1 struct student s1; //2 struct student s2 = { }; //3 创建结构体时顺便创建结构体变量,通过.来访问结构体中的属性 10.结构体创建自定义类型过程中struct不能省略，但是创建变量的过程c++ struct可以 省略11. // 结构体数组 struct 结构体名字 数组名字{个数}={ { }，{ } ，{ } } // 结构体指针 利用-&gt;可以通过结构体来访问结构体的属性 student s1 = { &quot;李斯&quot;,56,99 }; student * p = &amp;s1; cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot;年龄:&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot;分数&quot; &lt;&lt; p-&gt;score; 12.结构体嵌套结构体 struct student { string name; int scroe; }; struct teacher { int id; string name; int age; struct student s1;//学生 s1 }; teacher t; t.id = 10086; t.name = &quot;老王&quot;; t.age = 58; t.s1. name = &quot;小王&quot;; t.s1.scroe = 99; teacher * p = &amp;t; cout &lt;&lt; &quot;老师姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot;老师工号: &quot; &lt;&lt; p-&gt;id &lt;&lt; &quot;老师年龄: &quot; &lt;&lt; p-&gt;age &lt;&lt; &quot;老师的学生名字: &quot; &lt;&lt; p-&gt;s1.name &lt;&lt; &quot;老师的学生分数: &quot; &lt;&lt; p-&gt;s1.scroe; 13. 结构体中使用const来防止误操作14.—重点—main里面调用函数，形参相当于把参数复制了一遍，增大了储存空间和代码量。将函数的形参变为指针，可以大大减少内存的占用（指针不会复制数据，其只是进行地址传递）15. system( “ pause ” ); //请按任意键继续 system( “ cls ” ); //清屏操作 未完待续…","categories":[{"name":"c与c++","slug":"c与c","permalink":"http://yoursite.com/categories/c%E4%B8%8Ec/"}],"tags":[]},{"title":"c与c++知识点(一)","slug":"C与C++笔记1","date":"2020-03-03T04:49:16.000Z","updated":"2020-03-30T12:32:58.451Z","comments":true,"path":"2020/03/03/C与C++笔记1/","link":"","permalink":"http://yoursite.com/2020/03/03/C%E4%B8%8EC++%E7%AC%94%E8%AE%B01/","excerpt":"","text":"这是我自己在学习c++基础的过程中，顺便复习了下C语言，然后总结的一些小小知识点。—写在前面的话第一节1.int a; sizeof(int) = sizeof(a); ---求所储存的字节 2.float aa = &#39;A&#39; cout &lt;&lt; (int)aa &lt;&lt; endl; //输出A的数值(强制转化为 int) 注意格式 3.float f2 = 3e2 //3*10^2 float f3 = 3e-2 //3*0.1^2 4.bool 真或假 bool flag = false/true(0/1); —除了0为假，其余都为真5.字符串&nbsp;&nbsp;(1)char str[ ] = &quot;hello world&quot; cout&lt;&lt;str&lt;&lt;endl; &nbsp;&nbsp;(2) string 变量名 =”字符串值” （引用头文件include“string” 有的是在iostream头文件中）string name[3] = {&quot;张三&quot;,&quot;李四&quot;,&quot;王麻子&quot;}; string name=”胖虎”； 6.int a1 = 10; ++a1*10; //(运算结果为110)先加1后乘以10， int a1 =10; a1++*10; //(运算结果为101)先乘以10 后加1，先执行表达式，再增加 7.-= /= %= int a=10; int b=5; cout&lt;&lt;(a==b); //输出结果为0(假) 8.rand() % 80; //生成0-79的随机数 rand() % 80+1; // 生成0-80随机数 /* 需要包含头文件 #include “cstdlib” */ // #include ”ctime“ (伪函数) srand((unsigned int)time(NULL)); 利用系统时钟生成伪数字 9.int a = 10; int b = 20; (a&lt;b?a:b)=100; cout &lt;&lt;a; a=100 cout&lt;&lt;b; //b=2 10.int a = 354; //个位 a%10 十位 a%100/10 百位 a/100 11. \\t 制表符代替空格 12.goto flag ； flag： //跳转语句 ---读懂就可，不建议使用 13./*数组*/ int arr[5] = {1,2,3,4,5} /*每个数组占用的内存空间*/ sizeof(arr) /*每个素占用的内存空间 */ sizeof(arr[0]), /*数组中元素个数为*/ sizeof(arr) / sizeof(arr[0]) //------重点 14./*数组地址 */ int arr[5] = {1,2,3,4,5} /*数组首整型地址*/ cout&lt;&lt; (int)arr; /*第一个元素整型地址*/ cout&lt;&lt;(int)&amp;arr[0]; //------重点 15.冒泡排序法void fun(int c[], int d) { int temp=0; for (int a = 0; a &lt; d - 1; a++) { for (int b = 0; b &lt; d - 1 - a; b++) { if (c[b] &lt;c[b + 1]) { temp = c[b]; c[b] = c[b + 1]; c[b + 1] = temp; } } } } 未完待续…","categories":[{"name":"c与c++","slug":"c与c","permalink":"http://yoursite.com/categories/c%E4%B8%8Ec/"}],"tags":[]},{"title":"MDK、KEIL的兼容与破解","slug":"MDK、KEIL的兼容与破解","date":"2020-03-02T04:49:16.000Z","updated":"2020-03-29T13:50:29.084Z","comments":true,"path":"2020/03/02/MDK、KEIL的兼容与破解/","link":"","permalink":"http://yoursite.com/2020/03/02/MDK%E3%80%81KEIL%E7%9A%84%E5%85%BC%E5%AE%B9%E4%B8%8E%E7%A0%B4%E8%A7%A3/","excerpt":"很多人可能有和我一样的经历，刚刚学完51单片机就转手来学32开发板，可面临的第一个很尴尬的问题就是KEIL和MDK不能同时兼容存在，自己想学32就要用到MDK,可又放不下刚刚捧热的”情人”keil”","text":"很多人可能有和我一样的经历，刚刚学完51单片机就转手来学32开发板，可面临的第一个很尴尬的问题就是KEIL和MDK不能同时兼容存在，自己想学32就要用到MDK,可又放不下刚刚捧热的”情人”keil” 第一章其实keil和mdk的共存是很简单的，话不多说，下文直接上硬菜(附keil&amp;mdk的安装包)先在d盘创建英文的文件夹(名件名为英文的是为了防止在后续的开发中出现莫名奇妙的警告错误信息)我创建的文件名称为 MDK5 然后打开我们mdk的安装包，按照顺序将程序安装到d盘MDK5的路径下(安装包文末会提供)（以32的f4包来举个栗子） 第二章请务必按如下顺序安装：安装MDK521A安装Keil.STM32F4xx_DFP（安装过程中需要输入的用户名字和Email可随意填写） 然后打开我们keil的安装包，将程序安装到d盘MDK5的路径下(安装包文末会提供)（两个安装包安装路径一定要相同） mdK和KEIL是安装在同一路径下，使用同一个桌面快捷方式，接下来教大家如何分别创建51和32新文件. 第三章双击打开我们的keil,Project -&gt;第一个New uVision Project当我们需要写32代码时，选择下面如图这个选项，然后选择相应的芯片来写代码。 当我们需要写51代码时，选择下面如图这个选项，然后在Atmel中选择stc89c52来写代码 在文章的结尾我为大家分享下keil&amp;mdk的安装包软件keil&amp;mdk安装包链接：https://pan.baidu.com/s/1IPHFC7OMV42ard_GX4LL0w提取码：rrki如果链接失效，请留言进行补充(小白的第一篇博客，不喜勿喷，若有不足之处，还望多多指出,谢谢！) 喜欢就常来看看呗，武汉加油，中国加油噢","categories":[{"name":"单片机","slug":"单片机","permalink":"http://yoursite.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[]}],"categories":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"http://yoursite.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"},{"name":"c与c++","slug":"c与c","permalink":"http://yoursite.com/categories/c%E4%B8%8Ec/"},{"name":"单片机","slug":"单片机","permalink":"http://yoursite.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[]}