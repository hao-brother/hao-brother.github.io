{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-03-28T12:50:44.000Z","updated":"2020-03-29T03:25:06.161Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-03-28T12:52:27.000Z","updated":"2020-03-29T03:27:15.002Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"search","date":"2020-03-28T12:55:50.000Z","updated":"2020-03-28T12:56:19.471Z","comments":true,"path":"search/index.html","permalink":"http://yoursite.com/search/index.html","excerpt":"","text":""}],"posts":[{"title":"c与c++知识点(一)","slug":"C与C++笔记1","date":"2020-03-02T04:49:16.000Z","updated":"2020-03-29T11:48:57.314Z","comments":true,"path":"2020/03/02/C与C++笔记1/","link":"","permalink":"http://yoursite.com/2020/03/02/C%E4%B8%8EC++%E7%AC%94%E8%AE%B01/","excerpt":"","text":"这是我自己在学习c++基础的过程中，顺便复习了下C语言，然后总结的一些小小知识点。—写在前面的话第一节1.int a; sizeof(int) = sizeof(a); —求所储存的字节2.float aa = ‘A’ cout &lt;&lt; (int)aa &lt;&lt; endl; 输出A的数值(强制转化为 int) 注意格式3.float f2 = 3e2 //310^2 float f3 = 3e-2 //30.1^24.bool 真或假 bool flag = false/true(0/1); —除了0为假，其余都为真5.字符串&nbsp;&nbsp;(1) char str[ ] = “hello world” cout&lt;&lt;str&lt;&lt;endl;&nbsp;&nbsp;(2) string 变量名 =”字符串值” （引用头文件include“string” 有的是在iostream头文件中）string name[3] = {“张三”,”李四”,”王麻子”}; string name=”胖虎”； 第二节1.int a1 = 10; ++a110(运算结果为110)先加1后乘以10，a1++10(100)先乘以10 后加1，先执行表达式，再增加。2.-= /= %= int a=10; int b=5; cout&lt;&lt;(a==b); 输出结果为0(假)3.rand() % 80, 生成0-79的随机数 rand() % 80+1 , 生成0-80随机数需要包含头文件 #include “cstdlib” #include ”ctime“ (伪函数) srand((unsigned int)time(NULL)); 利用系统时钟生成伪数字4.int a = 10; int b = 20; (a&lt;b?a:b)=100; cout &lt;&lt;a; a=100 cout&lt;&lt;b; b=205.int a = 354; 个位 a%10 十位 a%100/10 百位 a/100 第三节1.\\t 制表符代替空格2.goto flag ； flag： 跳转语句 —读懂就可，不建议使用3.数组 int arr[5] = {1,2,3,4,5} 每个数组占用的内存空间sizeof(arr), 每个 元素占用的内存空间 sizeof(arr[0]), 数组中元素个数为 sizeof(arr) / sizeof(arr[0]) ——重点4. 数组地址 int arr[5] = {1,2,3,4,5} 数组首整型地址cout&lt;&lt; (int)arr; 第一个元素整型地址 cout&lt;&lt;(int)&amp;arr[0];——重点5.冒泡排序法 如图 未完待续…","categories":[{"name":"c与c++","slug":"c与c","permalink":"http://yoursite.com/categories/c%E4%B8%8Ec/"}],"tags":[]},{"title":"MDK、KEIL的兼容与破解","slug":"MDK、KEIL的兼容与破解","date":"2020-03-02T04:49:16.000Z","updated":"2020-03-29T08:56:45.029Z","comments":true,"path":"2020/03/02/MDK、KEIL的兼容与破解/","link":"","permalink":"http://yoursite.com/2020/03/02/MDK%E3%80%81KEIL%E7%9A%84%E5%85%BC%E5%AE%B9%E4%B8%8E%E7%A0%B4%E8%A7%A3/","excerpt":"很多人可能有和我一样的经历，刚刚学完51单片机就转手来学32开发板，可面临的第一个很尴尬的问题就是KEIL和MDK不能同时兼容存在，自己想学32就要用到MDK,可又放不下刚刚捧热的”情人”keil”","text":"很多人可能有和我一样的经历，刚刚学完51单片机就转手来学32开发板，可面临的第一个很尴尬的问题就是KEIL和MDK不能同时兼容存在，自己想学32就要用到MDK,可又放不下刚刚捧热的”情人”keil” 第一章其实keil和mdk的共存是很简单的，话不多说，下文直接上硬菜(附keil&amp;mdk的安装包)先在d盘创建英文的文件夹(名件名为英文的是为了防止在后续的开发中出现莫名奇妙的警告错误信息)我创建的文件名称为 MDK5 然后打开我们mdk的安装包，按照顺序将程序安装到d盘MDK5的路径下(安装包文末会提供)（以32的f4包来举个栗子） 第二章请务必按如下顺序安装：安装MDK521A安装Keil.STM32F4xx_DFP（安装过程中需要输入的用户名字和Email可随意填写） 然后打开我们keil的安装包，将程序安装到d盘MDK5的路径下(安装包文末会提供)（两个安装包安装路径一定要相同） mdK和KEIL是安装在同一路径下，使用同一个桌面快捷方式，接下来教大家如何分别创建51和32新文件. 第三章双击打开我们的keil,Project -&gt;第一个New uVision Project当我们需要写32代码时，选择下面如图这个选项，然后选择相应的芯片来写代码。 当我们需要写51代码时，选择下面如图这个选项，然后在Atmel中选择stc89c52来写代码 在文章的结尾我为大家分享下keil&amp;mdk的安装包软件keil&amp;mdk安装包链接：https://pan.baidu.com/s/1IPHFC7OMV42ard_GX4LL0w提取码：rrki如果链接失效，请留言进行补充(小白的第一篇博客，不喜勿喷，若有不足之处，还望多多指出,谢谢！) 喜欢就常来看看呗，武汉加油，中国加油噢","categories":[{"name":"单片机","slug":"单片机","permalink":"http://yoursite.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[]},{"title":"c与c++知识点(一)","slug":"C与C++笔记2","date":"2020-03-02T04:49:16.000Z","updated":"2020-03-29T11:48:57.314Z","comments":true,"path":"2020/03/02/C与C++笔记2/","link":"","permalink":"http://yoursite.com/2020/03/02/C%E4%B8%8EC++%E7%AC%94%E8%AE%B02/","excerpt":"","text":"这是我自己在学习c++基础的过程中，顺便复习了下C语言，然后总结的一些小小知识点。—写在前面的话第一节1.int a; sizeof(int) = sizeof(a); —求所储存的字节2.float aa = ‘A’ cout &lt;&lt; (int)aa &lt;&lt; endl; 输出A的数值(强制转化为 int) 注意格式3.float f2 = 3e2 //310^2 float f3 = 3e-2 //30.1^24.bool 真或假 bool flag = false/true(0/1); —除了0为假，其余都为真5.字符串&nbsp;&nbsp;(1) char str[ ] = “hello world” cout&lt;&lt;str&lt;&lt;endl;&nbsp;&nbsp;(2) string 变量名 =”字符串值” （引用头文件include“string” 有的是在iostream头文件中）string name[3] = {“张三”,”李四”,”王麻子”}; string name=”胖虎”； 第二节1.int a1 = 10; ++a110(运算结果为110)先加1后乘以10，a1++10(100)先乘以10 后加1，先执行表达式，再增加。2.-= /= %= int a=10; int b=5; cout&lt;&lt;(a==b); 输出结果为0(假)3.rand() % 80, 生成0-79的随机数 rand() % 80+1 , 生成0-80随机数需要包含头文件 #include “cstdlib” #include ”ctime“ (伪函数) srand((unsigned int)time(NULL)); 利用系统时钟生成伪数字4.int a = 10; int b = 20; (a&lt;b?a:b)=100; cout &lt;&lt;a; a=100 cout&lt;&lt;b; b=205.int a = 354; 个位 a%10 十位 a%100/10 百位 a/100 第三节1.\\t 制表符代替空格2.goto flag ； flag： 跳转语句 —读懂就可，不建议使用3.数组 int arr[5] = {1,2,3,4,5} 每个数组占用的内存空间sizeof(arr), 每个 元素占用的内存空间 sizeof(arr[0]), 数组中元素个数为 sizeof(arr) / sizeof(arr[0]) ——重点4. 数组地址 int arr[5] = {1,2,3,4,5} 数组首整型地址cout&lt;&lt; (int)arr; 第一个元素整型地址 cout&lt;&lt;(int)&amp;arr[0];——重点5.冒泡排序法 如图 未完待续…","categories":[{"name":"c与c++","slug":"c与c","permalink":"http://yoursite.com/categories/c%E4%B8%8Ec/"}],"tags":[]}],"categories":[{"name":"c与c++","slug":"c与c","permalink":"http://yoursite.com/categories/c%E4%B8%8Ec/"},{"name":"单片机","slug":"单片机","permalink":"http://yoursite.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[]}